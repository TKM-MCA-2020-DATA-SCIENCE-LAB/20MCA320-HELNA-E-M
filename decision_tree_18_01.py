# -*- coding: utf-8 -*-
"""decision-tree-18/01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VCUQRBPOY9Z0bIC0xWG9yM_tN24WEQEe
"""

import pandas as pd
import numpy as np
from sklearn.datasets import load_iris

#load iris data
data=load_iris()

data.data.shape

print('classes to predict',data.target_names)
print('features',data.feature_names)

x=data.data
y=data.target
display(x.shape,y.shape)

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

X_train,X_test,Y_train,Y_test=train_test_split(x,y,test_size=0.25,random_state=50)

#default criterion is Gini
classifier=DecisionTreeClassifier()
classifier.fit(X_train,Y_train)

y_predicted=classifier.predict(X_test)

from sklearn.metrics import accuracy_score
print("accuracy on train data using Gini: ",accuracy_score(Y_train,classifier.predict(X_train)))
print("accuracy on test data using Gini: ",accuracy_score(Y_test,y_predicted))

#change criterion to entropy
classifier_entropy=DecisionTreeClassifier(criterion='entropy')
classifier_entropy.fit(X_train,Y_train)
y_predicted_entropy=classifier_entropy.predict(X_test)
print("Accuracy on train data using entropy",accuracy_score(Y_train,classifier_entropy.predict(X_train)))
print("Accuracy on test data using entropy",accuracy_score(Y_test,y_predicted_entropy))

#change criterion to entropy with min_samples_split to 50.Default value is 2
classifier_entropy_minsample=DecisionTreeClassifier(criterion='entropy',min_samples_split=50)
classifier_entropy_minsample.fit(X_train,Y_train)
y_predicted_entropy_minsample=classifier_entropy_minsample.predict(X_test)
print("Accuracy on train data using entropy",accuracy_score(Y_train,classifier_entropy_minsample.predict(X_train)))
print("Accuracy on test data using entropy",accuracy_score(Y_test,y_predicted_entropy_minsample))

#visualize the decision tree
from sklearn.tree import export_graphviz #for visualization
from six import  StringIO   #to keep the older versions of tree for updating later\n",
from IPython.display import Image #IPython is an interactive shell that is built with python
import pydotplus  #python interface to Graphviz's Dot language

dot_data=StringIO()
export_graphviz(classifier,out_file=dot_data,filled=True,rounded=True,special_characters=True,feature_names=data.feature_names,class_names=data.target_names)
graph=pydotplus.graph_from_dot_data(dot_data.getvalue())
Image(graph.create_png())